/*
 * xnat-Qualtrics-Plugin: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2017, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

import org.gradle.internal.jvm.Jvm

// TODO: This block is required for the 'xnat-data-builder' plugin to function.
buildscript {
    ext {
        vXnat = '1.7.5'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
    }
}

// TODO: Change the group and version to values appropriate for your plugin project.
group 'edu.monash.xnat.plugins'
version '1.0.1'

// TODO: This is the minimum set of Gradle plugins required to build most XNAT plugins. You may include many others, including plugins for testing and test coverage, IDE integration, and more.
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'xnat-data-builder'

// TODO: This provides access to all of these repositories for dependency resolution.
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'http://dcm4che.org/maven2'
        name 'dcm4che Maven Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

configurations {
    compile.extendsFrom(compileAndInclude)
}


// TODO: As of the 1.7.x release, XNAT is built as a Java 7-compatible (i.e. JDK 1.7) application. All plugins must be 1.7 compatible as well.
sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

// TODO: This is a pretty minimal set of dependencies, so don't worry if you need to add more.
dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation "org.nrg.xnat:tasks:1.7.5-SNAPSHOT"

    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation("org.nrg:framework") {
        transitive = false
    }
    implementation("org.nrg:config") {
        transitive = false
    }
    implementation("org.nrg:transaction") {
        transitive = false
    }
    implementation("org.nrg:mail") {
        transitive = false
    }
    implementation("org.nrg:prefs") { transitive = false }
    implementation("org.nrg.dicom:mizer") { transitive = false }
    implementation("org.nrg:dicomtools") { transitive = false }

    implementation("javax.servlet:javax.servlet-api") { transitive = false }

    implementation("turbine:turbine") {
        transitive = false
    }
    implementation("org.apache.velocity:velocity") {
        transitive = false
    }

    implementation("org.slf4j:slf4j-api") { transitive = false }
    implementation("org.restlet:org.restlet") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-databind") { transitive = false }
    implementation("org.apache.axis:axis") { transitive = false }
    implementation("dcm4che:dcm4che-core") { transitive = false }
    implementation("javax.mail:javax.mail-api") { transitive = false }
    implementation("com.google.code.gson:gson") { transitive = false }
    implementation("stratum:stratum") {
        transitive = false
    }

    implementation("eu.bitwalker:UserAgentUtils") { transitive = false }

    implementation("org.springframework:spring-core") { transitive = false }
    implementation("org.springframework:spring-context") { transitive = false }
    implementation("org.springframework:spring-tx") { transitive = false }
    implementation("org.springframework:spring-web") { transitive = false }

    implementation("io.springfox:springfox-swagger2") { transitive = false }
    implementation("io.springfox:springfox-swagger-ui") { transitive = false }
    compileAndInclude group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
}
configurations {
    all*.exclude group: 'com.sun.media', module: 'jai_imageio'
    all*.exclude group: 'javax.sql', module: 'jdbc-stdext'
    all*.exclude group: 'javax.transaction', module: 'jta'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = property "rt.17.jar"
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.fork = true
            options.compilerArgs << "-XDignore.symbol.file"
            options.bootClasspath = rt17jar
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}


task fatJar(type: Jar) {
    zip64 true
    baseName = project.name + '-all'
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
